{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-]","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OAK CUSTOM DOCS","text":""},{"location":"oak/depth/depth_viewer/","title":"DepthAI \u200b\u6df1\u5ea6\u200b\u67e5\u770b\u5668","text":""},{"location":"oak/depth/depth_viewer/#\u4ecb\u7ecd","title":"\u4ecb\u7ecd","text":"<p>\u200b\u672c\u200b\u811a\u672c\u200b\u4f7f\u7528\u200b DepthAI \u200b\u5e93\u200b\u4e0e\u200b\u517c\u5bb9\u200b\u8bbe\u5907\u200b\u8fdb\u884c\u200b\u4ea4\u4e92\u200b\uff0c\u200b\u83b7\u53d6\u200b\u6df1\u5ea6\u200b\u4fe1\u606f\u200b\uff0c\u200b\u5e76\u200b\u5b9e\u65f6\u200b\u663e\u793a\u200b\u89c6\u5dee\u200b\u56fe\u200b\u3002\u200b\u5b83\u200b\u5141\u8bb8\u200b\u7528\u6237\u200b\u5b9e\u65f6\u200b\u67e5\u770b\u200b\u6df1\u5ea6\u200b\u4fe1\u606f\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u5c06\u200b\u6df1\u5ea6\u200b\u5e27\u200b\u4fdd\u5b58\u200b\u4e3a\u200b PNG \u200b\u6587\u4ef6\u200b\u3002</p>"},{"location":"oak/depth/depth_viewer/#\u524d\u63d0\u6761\u4ef6\u548c\u4f9d\u8d56\u5173\u7cfb","title":"\u524d\u63d0\u6761\u4ef6\u200b\u548c\u200b\u4f9d\u8d56\u200b\u5173\u7cfb","text":"<ul> <li>\u200b\u517c\u5bb9\u200b DepthAI \u200b\u7684\u200b\u786c\u4ef6\u200b\u8bbe\u5907\u200b\uff08\u200b\u5982\u200b OAK-D \u200b\u76f8\u673a\u200b\uff09</li> <li>Python 3.x \u200b\u73af\u5883\u200b</li> <li>\u200b\u5e93\u200b\uff1adepthai, opencv-python, numpy</li> </ul>"},{"location":"oak/depth/depth_viewer/#\u5b89\u88c5","title":"\u5b89\u88c5","text":"<p>\u200b\u5b89\u88c5\u200b\u6240\u200b\u9700\u200b\u7684\u200b Python \u200b\u5e93\u200b\uff0c\u200b\u8bf7\u200b\u6267\u884c\u200b\u4ee5\u4e0b\u200b\u547d\u4ee4\u200b\uff1a <pre><code>pip install depthai opencv-python numpy\n</code></pre></p>"},{"location":"oak/depth/depth_viewer/#\u6e90\u7801","title":"\u6e90\u7801","text":"depth_viewer.py <pre><code># coding=utf-8\nimport argparse\nfrom pathlib import Path\n\nimport cv2\nimport depthai as dai\nimport numpy as np\n\nroot = Path(__file__).parent.resolve()\n\n# \u200b\u89e3\u6790\u200b\u547d\u4ee4\u884c\u200b\u53c2\u6570\u200b\nparser = argparse.ArgumentParser(description=\"DepthAI Depth Viewer\")\nparser.add_argument(\n    \"-mres\",\n    \"--mono_resolution\",\n    type=str,\n    default=\"400p\",\n    choices={\"480p\", \"400p\", \"720p\", \"800p\", \"1200p\"},\n    help=\"\u200b\u9009\u62e9\u200b\u5355\u76ee\u200b\u76f8\u673a\u200b\u5206\u8fa8\u7387\u200b\uff08\u200b\u9ad8\u5ea6\u200b\uff09\u3002 \uff08\u200b\u9ed8\u8ba4\u200b\uff1a%(default)s\uff09\",\n)\nparser.add_argument(\n    \"-f\",\n    \"--fps\",\n    type=int,\n    default=30,\n    help=\"\u200b\u76f8\u673a\u200b\u5e27\u200b\u7387\u200b\uff08\u200b\u9ed8\u8ba4\u200b\uff1a%(default)s\uff09\",\n)\n\nparser.add_argument(\n    \"-e\",\n    \"--extended_disparity\",\n    default=False,\n    action=\"store_true\",\n    help=\"\u200b\u542f\u7528\u200b\u6269\u5c55\u200b\u89c6\u5dee\u200b\uff0c\u200b\u6700\u5c0f\u200b\u6df1\u5ea6\u200b\u8d8a\u8fd1\u200b\uff0c\u200b\u89c6\u5dee\u200b\u8303\u56f4\u200b\u52a0\u500d\u200b\uff08\u200b\u4ece\u200b 95 \u200b\u5230\u200b 190\uff09\uff08\u200b\u9ed8\u8ba4\u200b\uff1a%(default)s\uff09\",\n)\nparser.add_argument(\n    \"-ne\",\n    \"--no_extended_disparity\",\n    default=False,\n    action=\"store_true\",\n    help=\"\u200b\u7981\u7528\u200b\u6269\u5c55\u200b\u89c6\u5dee\u200b\uff0c\u200b\u6700\u5c0f\u200b\u6df1\u5ea6\u200b\u8d8a\u8fd1\u200b\uff0c\u200b\u89c6\u5dee\u200b\u8303\u56f4\u200b\u52a0\u500d\u200b\uff08\u200b\u4ece\u200b 95 \u200b\u5230\u200b 190\uff09\uff08\u200b\u9ed8\u8ba4\u200b\uff1a%(default)s\uff09\",\n)\nparser.add_argument(\n    \"-sub\",\n    \"--subpixel\",\n    default=True,\n    action=\"store_true\",\n    help=\"\u200b\u4f7f\u7528\u200b\u4e9a\u200b\u50cf\u7d20\u200b\u63d2\u503c\u200b\uff08\u200b\u9ed8\u8ba4\u200b\uff1a%(default)s\uff09\",\n)\nparser.add_argument(\n    \"-nsub\",\n    \"--no_subpixel\",\n    action=\"store_true\",\n    help=\"\u200b\u7981\u7528\u200b\u4e9a\u200b\u50cf\u7d20\u200b\u63d2\u503c\u200b\uff08\u200b\u9ed8\u8ba4\u200b\uff1a%(default)s\uff09\",\n)\nparser.add_argument(\n    \"-l\",\n    \"--lr_check\",\n    # default=True,\n    action=\"store_false\",\n    help=\"\u200b\u5de6\u200b/\u200b\u53f3\u200b\u89c6\u5dee\u200b\u68c0\u67e5\u200b\uff08\u200b\u9ed8\u8ba4\u200b\uff1a%(default)s\uff09\",\n)\nparser.add_argument(\n    \"-file\",\n    \"--filename\",\n    type=str,\n    default=\"depth\",\n    help=\"\u200b\u8f93\u51fa\u200b png \u200b\u6587\u4ef6\u540d\u200b\uff08\u200b\u9ed8\u8ba4\u200b\uff1a%(default)s\uff09\",\n)\n\nargs = parser.parse_args()\n\n# \u200b\u5b9a\u4e49\u200b\u5355\u76ee\u200b\u548c\u200b\u5f69\u8272\u200b\u76f8\u673a\u200b\u7684\u200b\u5206\u8fa8\u7387\u200b\nmono_res_opts = {\n    \"400p\": dai.MonoCameraProperties.SensorResolution.THE_400_P,\n    \"480p\": dai.MonoCameraProperties.SensorResolution.THE_480_P,\n    \"720p\": dai.MonoCameraProperties.SensorResolution.THE_720_P,\n    \"800p\": dai.MonoCameraProperties.SensorResolution.THE_800_P,\n    \"1200p\": dai.MonoCameraProperties.SensorResolution.THE_1200_P,\n}\nMONO_RES = mono_res_opts.get(args.mono_resolution)\n\nFPS = args.fps\nFILENAME = args.filename\nEXTENDED_DISPARITY = args.extended_disparity\nif args.no_extended_disparity:\n    EXTENDED_DISPARITY = False\nSUBPIXEL = args.subpixel\nif args.no_subpixel:\n    SUBPIXEL = False\nLR_CHECK = args.lr_check\n\n\ndef create_pipeline():\n    \"\"\"\u200b\u521b\u5efa\u200b DepthAI \u200b\u6d41\u6c34\u7ebf\u200b\"\"\"\n    pipeline = dai.Pipeline()\n\n    # \u200b\u521b\u5efa\u200b\u76f8\u673a\u200b\u8282\u70b9\u200b\n    monoLeft = pipeline.create(dai.node.MonoCamera)\n    monoRight = pipeline.create(dai.node.MonoCamera)\n    depth = pipeline.create(dai.node.StereoDepth)\n\n    sync = pipeline.create(dai.node.Sync)\n    xOut = pipeline.create(dai.node.XLinkOut)\n    xOut.input.setBlocking(False)\n\n    # \u200b\u8bbe\u7f6e\u200b\u76f8\u673a\u200b\u5c5e\u6027\u200b\n    monoLeft.setResolution(MONO_RES)\n    monoLeft.setCamera(\"left\")\n    monoLeft.setFps(FPS)\n\n    monoRight.setResolution(MONO_RES)\n    monoRight.setCamera(\"right\")\n    monoRight.setFps(FPS)\n\n    # \u200b\u8bbe\u7f6e\u200b\u6df1\u5ea6\u200b\u4f30\u8ba1\u200b\u5c5e\u6027\u200b\n    depth.setDefaultProfilePreset(dai.node.StereoDepth.PresetMode.HIGH_DENSITY)\n    depth.initialConfig.setMedianFilter(dai.MedianFilter.KERNEL_7x7)\n    depth.setLeftRightCheck(LR_CHECK)\n    depth.setExtendedDisparity(EXTENDED_DISPARITY)\n    depth.setSubpixel(SUBPIXEL)\n\n    # \u200b\u5c06\u200b\u8282\u70b9\u200b\u8fde\u63a5\u8d77\u6765\u200b\n    monoLeft.out.link(depth.left)\n    monoRight.out.link(depth.right)\n    depth.disparity.link(sync.inputs[\"disparity\"])\n    depth.depth.link(sync.inputs[\"depth\"])\n    sync.out.link(xOut.input)\n    xOut.setStreamName(\"out\")\n\n    return pipeline, depth.initialConfig.getMaxDisparity()\n\n\ndef main():\n    \"\"\"\u200b\u4e3b\u200b\u51fd\u6570\u200b\uff0c\u200b\u8fd0\u884c\u200b DepthAI \u200b\u6df1\u5ea6\u200b\u67e5\u770b\u5668\u200b\"\"\"\n    pipeline, MaxDisparity = create_pipeline()\n    # \u200b\u8fde\u63a5\u200b\u5230\u200b\u8bbe\u5907\u200b\u5e76\u200b\u542f\u52a8\u200b\u6d41\u6c34\u7ebf\u200b\n    with dai.Device(pipeline) as device:\n        device.setIrLaserDotProjectorIntensity(0.5)\n        device.setIrFloodLightIntensity(0.5)\n\n        # \u200b\u83b7\u53d6\u200b\u8f93\u51fa\u200b\u961f\u5217\u200b\uff0c\u200b\u7528\u4e8e\u200b\u4ece\u200b\u4e0a\u8ff0\u200b\u8f93\u51fa\u200b\u4e2d\u200b\u83b7\u53d6\u200b\u89c6\u5dee\u200b\u5e27\u200b\n        q = device.getOutputQueue(name=\"out\", maxSize=4, blocking=False)\n\n        while True:\n            inMessage = q.get()  # \u200b\u963b\u585e\u200b\u8c03\u7528\u200b\uff0c\u200b\u7b49\u5f85\u200b\u65b0\u200b\u7684\u200b\u6570\u636e\u200b\u5230\u8fbe\u200b\n            inDisparity = inMessage[\"disparity\"]\n            frame = inDisparity.getFrame()\n            # \u200b\u4e3a\u4e86\u200b\u66f4\u597d\u200b\u7684\u200b\u53ef\u89c6\u5316\u200b\u6548\u679c\u200b\u8fdb\u884c\u200b\u5f52\u4e00\u5316\u200b\n            frame = (frame * (255 / MaxDisparity)).astype(np.uint8)\n\n            cv2.imshow(\"disparity\", frame)\n\n            # \u200b\u53ef\u7528\u200b\u7684\u200b\u989c\u8272\u200b\u6620\u5c04\u200b\uff1ahttps://docs.opencv.org/3.4/d3/d50/group__imgproc__colormap.html\n            frame = cv2.applyColorMap(frame, cv2.COLORMAP_JET)\n            cv2.imshow(\"disparity_color\", frame)\n            key = cv2.waitKey(1)\n            if key == ord(\"q\"):\n                break\n\n            if key == ord(\"s\"):\n                file_path = root.joinpath(f\"{FILENAME}.png\")\n                depth_frame = inMessage[\"depth\"].getFrame()\n                cv2.imwrite(file_path.as_posix(), depth_frame, [cv2.IMWRITE_PNG_COMPRESSION, 0])\n                print(f\"Saved {file_path}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"oak/depth/depth_viewer/#\u7528\u6cd5","title":"\u7528\u6cd5","text":"<p>\u200b\u5728\u200b\u547d\u4ee4\u884c\u200b\u4e2d\u200b\u8fd0\u884c\u200b\u811a\u672c\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u53c2\u6570\u200b\u81ea\u5b9a\u4e49\u200b\u5355\u76ee\u200b\u76f8\u673a\u200b\u7684\u200b\u5206\u8fa8\u7387\u200b\u548c\u200b\u5e27\u200b\u7387\u200b\uff1a <pre><code>python depth_viewer.py --mono_resolution 400p --fps 30\n</code></pre></p>"},{"location":"oak/depth/depth_viewer/#\u53ef\u7528\u53c2\u6570","title":"\u53ef\u7528\u200b\u53c2\u6570","text":"<ul> <li><code>-mres</code>, <code>--mono_resolution</code>\uff1a\u200b\u5355\u76ee\u200b\u76f8\u673a\u200b\u5206\u8fa8\u7387\u200b\uff08\u200b\u9ad8\u5ea6\u200b\uff0c\u200b\u5355\u4f4d\u200b\uff1a\u200b\u50cf\u7d20\u200b\uff09</li> <li><code>-f</code>, <code>--fps</code>\uff1a\u200b\u76f8\u673a\u200b\u5e27\u200b\u7387\u200b</li> <li><code>-f</code>, <code>--filename</code>\uff1a\u200b\u8f93\u51fa\u200b\u6df1\u5ea6\u200b\u6570\u636e\u200b\u6587\u4ef6\u540d\u200b (\u200b\u4e0d\u200b\u542b\u200b\u540e\u7f00\u200b)</li> <li>... [\u200b\u5305\u62ec\u200b\u6240\u6709\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\u53ca\u5176\u200b\u89e3\u91ca\u200b]</li> </ul>"},{"location":"oak/depth/depth_viewer/#\u4fdd\u5b58\u6df1\u5ea6\u5e27","title":"\u4fdd\u5b58\u200b\u6df1\u5ea6\u200b\u5e27","text":"<p>\u200b\u6309\u4e0b\u200b 's' \u200b\u952e\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u5f53\u524d\u200b\u663e\u793a\u200b\u7684\u200b\u6df1\u5ea6\u200b\u5e27\u200b\u4fdd\u5b58\u200b\u4e3a\u200b PNG \u200b\u56fe\u50cf\u200b\uff0c\u200b\u4fdd\u5b58\u200b\u4f4d\u7f6e\u200b\u5728\u200b\u811a\u672c\u200b\u6587\u4ef6\u200b\u6240\u5728\u200b\u7684\u200b\u76ee\u5f55\u200b\u3002</p>"},{"location":"oak/depth/depth_viewer/#\u793a\u4f8b","title":"\u793a\u4f8b","text":"<p>\u200b\u542f\u52a8\u200b\u6df1\u5ea6\u200b\u67e5\u770b\u5668\u200b\u5e76\u200b\u4fdd\u5b58\u200b\u6df1\u5ea6\u200b\u5e27\u200b\uff1a <pre><code>python depth_viewer.py\n</code></pre> \u200b\u8fd0\u884c\u200b\u540e\u200b\uff0c\u200b\u6309\u200b 's' \u200b\u952e\u200b\u5373\u53ef\u200b\u5728\u200b\u811a\u672c\u200b\u6240\u5728\u200b\u76ee\u5f55\u200b\u4e0b\u200b\u4fdd\u5b58\u200b\u540d\u4e3a\u200b \"depth.png\" \u200b\u7684\u200b\u6df1\u5ea6\u200b\u5e27\u200b\u3002</p>"},{"location":"oak/depth/depth_viewer_lr/","title":"DepthAI \u200b\u6df1\u5ea6\u200b\u67e5\u770b\u5668\u200b LR","text":""},{"location":"oak/depth/depth_viewer_lr/#\u4ecb\u7ecd","title":"\u4ecb\u7ecd","text":"<p>\u200b\u672c\u200b\u811a\u672c\u200b\u4f7f\u7528\u200b DepthAI \u200b\u5e93\u200b\u4e0e\u200b\u517c\u5bb9\u200b\u8bbe\u5907\u200b\u8fdb\u884c\u200b\u4ea4\u4e92\u200b\uff0c\u200b\u83b7\u53d6\u200b\u6df1\u5ea6\u200b\u4fe1\u606f\u200b\uff0c\u200b\u5e76\u200b\u5b9e\u65f6\u200b\u663e\u793a\u200b\u89c6\u5dee\u200b\u56fe\u200b\u3002\u200b\u5b83\u200b\u5141\u8bb8\u200b\u7528\u6237\u200b\u5b9e\u65f6\u200b\u67e5\u770b\u200b\u6df1\u5ea6\u200b\u4fe1\u606f\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u5c06\u200b\u6df1\u5ea6\u200b\u5e27\u200b\u4fdd\u5b58\u200b\u4e3a\u200b PNG \u200b\u6587\u4ef6\u200b\u3002</p> <p>\u200b\u8be5\u200b\u811a\u672c\u200b\u6839\u636e\u200b\u7528\u6237\u200b\u7684\u200b\u8f93\u5165\u200b\u6765\u200b\u8c03\u6574\u200b\u611f\u5174\u8da3\u200b\u533a\u57df\u200b\uff08ROI\uff09\u200b\u548c\u200b\u8ba1\u7b97\u200b\u7b97\u6cd5\u200b\u3002\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u952e\u76d8\u200b\u6309\u952e\u200b\u6765\u200b\u64cd\u4f5c\u200b\u811a\u672c\u200b\u3002</p> <p>\u200b\u8be5\u200b\u811a\u672c\u200b\u652f\u6301\u200b\u4e0d\u540c\u200b\u7684\u200b\u8ba1\u7b97\u200b\u7b97\u6cd5\u200b\uff0c\u200b\u5305\u62ec\u200b\u5e73\u5747\u503c\u200b\u3001\u200b\u6700\u5c0f\u503c\u200b\u3001\u200b\u6700\u5927\u503c\u200b\u3001\u200b\u4f17\u6570\u200b\u548c\u200b\u4e2d\u4f4d\u6570\u200b\u3002</p> <p>\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u9f20\u6807\u200b\u5728\u200b\u56fe\u50cf\u200b\u4e0a\u200b\u5355\u51fb\u200b\u5e76\u200b\u62d6\u52a8\u200b\u6765\u200b\u9009\u62e9\u200b\u611f\u5174\u8da3\u200b\u533a\u57df\u200b\u3002</p>"},{"location":"oak/depth/depth_viewer_lr/#\u524d\u63d0\u6761\u4ef6\u548c\u4f9d\u8d56\u5173\u7cfb","title":"\u524d\u63d0\u6761\u4ef6\u200b\u548c\u200b\u4f9d\u8d56\u200b\u5173\u7cfb","text":"<ul> <li>OAK-D-LR \u200b\u76f8\u673a\u200b</li> <li>Python 3.x \u200b\u73af\u5883\u200b</li> <li>\u200b\u5e93\u200b\uff1a<code>depthai</code>, <code>opencv-python</code>, <code>numpy</code></li> </ul>"},{"location":"oak/depth/depth_viewer_lr/#\u5b89\u88c5","title":"\u5b89\u88c5","text":"<p>\u200b\u5b89\u88c5\u200b\u6240\u200b\u9700\u200b\u7684\u200b Python \u200b\u5e93\u200b\uff0c\u200b\u8bf7\u200b\u6267\u884c\u200b\u4ee5\u4e0b\u200b\u547d\u4ee4\u200b\uff1a</p> <pre><code>pip install depthai opencv-python numpy\n</code></pre>"},{"location":"oak/depth/depth_viewer_lr/#\u6e90\u7801","title":"\u6e90\u7801","text":"depth_viewer_lr.py <pre><code>#!/usr/bin/env python3\n# coding=utf-8\nimport argparse\nimport collections\nimport time\nfrom pathlib import Path\n\nimport cv2\nimport depthai as dai\nimport numpy as np\n\nCAM_GROUPS = [\"LC\", \"LR\", \"CR\"]\n\nroot = Path(__file__).parent.resolve()\n\n# \u200b\u89e3\u6790\u200b\u547d\u4ee4\u884c\u200b\u53c2\u6570\u200b\nparser = argparse.ArgumentParser(description=\"DepthAI Depth Viewer For LR\")\nparser.add_argument(\n    \"-sp\",\n    \"--stereo_pair\",\n    default=\"LR\",\n    choices=CAM_GROUPS,\n    help=\"\u200b\u76f8\u673a\u200b\u5bf9\u200b\uff08LR\u3001LC\u3001CR\uff09\uff0c`L` \u200b\u8868\u793a\u200b \u200b\u5de6\u200b\u76f8\u673a\u200b\uff0c`R` \u200b\u8868\u793a\u200b \u200b\u53f3\u200b\u76f8\u673a\u200b\uff0c`C` \u200b\u8868\u793a\u200b \u200b\u4e2d\u95f4\u200b\u76f8\u673a\u200b\uff08\u200b\u9ed8\u8ba4\u200b\uff1a%(default)s\uff09\",\n)\nparser.add_argument(\n    \"-f\",\n    \"--fps\",\n    type=int,\n    default=30,\n    help=\"\u200b\u76f8\u673a\u200b\u5e27\u200b\u7387\u200b\uff08\u200b\u9ed8\u8ba4\u200b\uff1a%(default)s\uff09\",\n)\n\nparser.add_argument(\n    \"-e\",\n    \"--extended_disparity\",\n    default=False,\n    action=\"store_true\",\n    help=\"\u200b\u542f\u7528\u200b\u6269\u5c55\u200b\u89c6\u5dee\u200b\uff0c\u200b\u6700\u5c0f\u200b\u6df1\u5ea6\u200b\u8d8a\u8fd1\u200b\uff0c\u200b\u89c6\u5dee\u200b\u8303\u56f4\u200b\u52a0\u500d\u200b\uff08\u200b\u4ece\u200b 95 \u200b\u5230\u200b 190\uff09\uff08\u200b\u9ed8\u8ba4\u200b\uff1a%(default)s\uff09\",\n)\nparser.add_argument(\n    \"-ne\",\n    \"--no_extended_disparity\",\n    default=False,\n    action=\"store_true\",\n    help=\"\u200b\u7981\u7528\u200b\u6269\u5c55\u200b\u89c6\u5dee\u200b\uff0c\u200b\u6700\u5c0f\u200b\u6df1\u5ea6\u200b\u8d8a\u8fd1\u200b\uff0c\u200b\u89c6\u5dee\u200b\u8303\u56f4\u200b\u52a0\u500d\u200b\uff08\u200b\u4ece\u200b 95 \u200b\u5230\u200b 190\uff09\uff08\u200b\u9ed8\u8ba4\u200b\uff1a%(default)s\uff09\",\n)\nparser.add_argument(\n    \"-sub\",\n    \"--subpixel\",\n    default=True,\n    action=\"store_true\",\n    help=\"\u200b\u4f7f\u7528\u200b\u4e9a\u200b\u50cf\u7d20\u200b\u63d2\u503c\u200b\uff08\u200b\u9ed8\u8ba4\u200b\uff1a%(default)s\uff09\",\n)\nparser.add_argument(\n    \"-nsub\",\n    \"--no_subpixel\",\n    action=\"store_true\",\n    help=\"\u200b\u7981\u7528\u200b\u4e9a\u200b\u50cf\u7d20\u200b\u63d2\u503c\u200b\uff08\u200b\u9ed8\u8ba4\u200b\uff1a%(default)s\uff09\",\n)\nparser.add_argument(\n    \"-l\",\n    \"--lr_check\",\n    # default=True,\n    action=\"store_false\",\n    help=\"\u200b\u5de6\u200b/\u200b\u53f3\u200b\u89c6\u5dee\u200b\u68c0\u67e5\u200b\uff08\u200b\u9ed8\u8ba4\u200b\uff1a%(default)s\uff09\",\n)\nparser.add_argument(\n    \"-file\",\n    \"--filename\",\n    type=str,\n    default=\"depth_lr\",\n    help=\"\u200b\u8f93\u51fa\u200b png \u200b\u6587\u4ef6\u540d\u200b\uff08\u200b\u9ed8\u8ba4\u200b\uff1a%(default)s\uff09\",\n)\n\nargs = parser.parse_args()\n\nFPS = args.fps\nFILENAME = args.filename\nEXTENDED_DISPARITY = args.extended_disparity\nif args.no_extended_disparity:\n    EXTENDED_DISPARITY = False\nSUBPIXEL = args.subpixel\nif args.no_subpixel:\n    SUBPIXEL = False\nLR_CHECK = args.lr_check\n\nCAM_GROUP = args.stereo_pair\ncalculation_algorithm = dai.SpatialLocationCalculatorAlgorithm.AVERAGE\ntop_left = dai.Point2f(0.4, 0.4)\nbottom_right = dai.Point2f(0.6, 0.6)\nconfig = dai.SpatialLocationCalculatorConfigData()\n\n\nclass FPSHandler:\n    \"\"\"\n    \u200b\u5904\u7406\u200b\u6240\u6709\u200b FPS \u200b\u76f8\u5173\u200b\u64cd\u4f5c\u200b\u7684\u200b\u7c7b\u200b\u3002\n\n    \u200b\u4e3b\u8981\u200b\u7528\u4e8e\u200b\u8ba1\u7b97\u200b\u4e0d\u540c\u200b\u6d41\u200b\u7684\u200b FPS\uff0c\u200b\u4f46\u200b\u4e5f\u200b\u53ef\u200b\u7528\u4e8e\u200b\u6839\u636e\u200b\u89c6\u9891\u6587\u4ef6\u200b\u7684\u200b FPS \u200b\u5c5e\u6027\u200b\u800c\u200b\u4e0d\u662f\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u6027\u80fd\u200b\u6765\u200b\u63d0\u4f9b\u200b\u89c6\u9891\u6587\u4ef6\u200b\uff08\u200b\u5982\u679c\u200b\u6211\u4eec\u200b\u6bd4\u4e0b\u200b\u4e00\u4e2a\u200b\u89c6\u9891\u200b\u5e27\u200b\u65e9\u200b\u5b8c\u6210\u200b\u5904\u7406\u200b\u4e00\u5e27\u200b\uff0c\u200b\u8fd9\u4f1a\u200b\u963b\u6b62\u200b\u89c6\u9891\u200b\u5feb\u901f\u200b\u53d1\u9001\u200b\uff09\u200b\u88ab\u200b\u6d88\u8017\u200b\uff09\n    \"\"\"\n\n    _fps_bg_color = (0, 0, 0)\n    _fps_color = (255, 255, 255)\n    _fps_type = cv2.FONT_HERSHEY_SIMPLEX\n    _fps_line_type = cv2.LINE_AA\n\n    def __init__(self, cap=None, maxTicks=100):\n        self._timestamp = None\n        self._start = None\n        self._framerate = cap.get(cv2.CAP_PROP_FPS) if cap is not None else None\n        self._useCamera = cap is None\n\n        self._iterCnt = 0\n        self._ticks = {}\n\n        if maxTicks &lt; 2:  # noqa: PLR2004\n            msg = f\"Provided maxTicks value must be 2 or higher (supplied: {maxTicks})\"\n            raise ValueError(msg)\n\n        self._maxTicks = maxTicks\n\n    def next_iter(self):\n        \"\"\"Marks the next iteration of the processing loop. Will use :obj:`time.sleep` method if initialized with video file object\"\"\"\n        if self._start is None:\n            self._start = time.monotonic()\n\n        if not self._useCamera and self._timestamp is not None:\n            frameDelay = 1.0 / self._framerate\n            delay = (self._timestamp + frameDelay) - time.monotonic()\n            if delay &gt; 0:\n                time.sleep(delay)\n        self._timestamp = time.monotonic()\n        self._iterCnt += 1\n\n    def tick(self, name):\n        \"\"\"\n        Marks a point in time for specified name\n\n        Args:\n            name (str): Specifies timestamp name\n        \"\"\"\n        if name not in self._ticks:\n            self._ticks[name] = collections.deque(maxlen=self._maxTicks)\n        self._ticks[name].append(time.monotonic())\n\n    def tick_fps(self, name):\n        \"\"\"\n        Calculates the FPS based on specified name\n\n        Args:\n            name (str): Specifies timestamps' name\n\n        Returns:\n            float: Calculated FPS or :code:`0.0` (default in case of failure)\n        \"\"\"\n        if name in self._ticks and len(self._ticks[name]) &gt; 1:\n            timeDiff = self._ticks[name][-1] - self._ticks[name][0]\n            return (len(self._ticks[name]) - 1) / timeDiff if timeDiff != 0 else 0.0\n        return 0.0\n\n    def fps(self):\n        \"\"\"\n        Calculates FPS value based on :func:`nextIter` calls, being the FPS of processing loop\n\n        Returns:\n            float: Calculated FPS or :code:`0.0` (default in case of failure)\n        \"\"\"\n        if self._start is None or self._timestamp is None:\n            return 0.0\n        timeDiff = self._timestamp - self._start\n        return self._iterCnt / timeDiff if timeDiff != 0 else 0.0\n\n    def print_status(self):\n        \"\"\"Prints total FPS for all names stored in :func:`tick` calls\"\"\"\n        print(\"=== TOTAL FPS ===\")\n        for name in self._ticks:\n            print(f\"[{name}]: {self.tick_fps(name):.1f}\")\n\n    def draw_fps(self, frame, name):\n        \"\"\"\n        Draws FPS values on requested frame, calculated based on specified name\n\n        Args:\n            frame (numpy.ndarray): Frame object to draw values on\n            name (str): Specifies timestamps' name\n        \"\"\"\n        frameFps = f\"{name.upper()} FPS: {round(self.tick_fps(name), 1)}\"\n        # cv2.rectangle(frame, (0, 0), (120, 35), (255, 255, 255), cv2.FILLED)\n        cv2.putText(frame, frameFps, (5, 15), self._fps_type, 0.5, self._fps_bg_color, 4, self._fps_line_type)\n        cv2.putText(frame, frameFps, (5, 15), self._fps_type, 0.5, self._fps_color, 1, self._fps_line_type)\n\n        if \"nn\" in self._ticks:\n            cv2.putText(\n                frame,\n                f\"NN FPS:  \" f\"{round(self.tick_fps('nn'), 1)}\",\n                (5, 30),\n                self._fps_type,\n                0.5,\n                self._fps_bg_color,\n                4,\n                self._fps_line_type,\n            )\n            cv2.putText(\n                frame,\n                f\"NN FPS:  \" f\"{round(self.tick_fps('nn'), 1)}\",\n                (5, 30),\n                self._fps_type,\n                0.5,\n                self._fps_color,\n                1,\n                self._fps_line_type,\n            )\n\n\ndef create_pipeline():\n    global calculation_algorithm, config  # noqa: PLW0602\n\n    # Create pipeline\n    pipeline = dai.Pipeline()\n\n    # Define sources and outputs\n    left = pipeline.create(dai.node.ColorCamera)\n    right = pipeline.create(dai.node.ColorCamera)\n\n    stereo = pipeline.create(dai.node.StereoDepth)\n    spatialLocationCalculator = pipeline.create(dai.node.SpatialLocationCalculator)\n\n    xoutSpatialData = pipeline.create(dai.node.XLinkOut)\n    xinSpatialCalcConfig = pipeline.create(dai.node.XLinkIn)\n\n    sync = pipeline.create(dai.node.Sync)\n    xOut = pipeline.create(dai.node.XLinkOut)\n    xOut.setStreamName(\"out\")\n    xOut.input.setBlocking(False)\n\n    xoutSpatialData.setStreamName(\"spatialData\")\n    xinSpatialCalcConfig.setStreamName(\"spatialCalcConfig\")\n\n    # Properties\n    left.setResolution(dai.ColorCameraProperties.SensorResolution.THE_1200_P)\n    left.setIspScale(1, 3)\n    left.setFps(30)\n    right.setResolution(dai.ColorCameraProperties.SensorResolution.THE_1200_P)\n    right.setIspScale(1, 3)\n    right.setFps(30)\n\n    if CAM_GROUP == \"LC\":\n        left.setBoardSocket(dai.CameraBoardSocket.CAM_B)\n        right.setBoardSocket(dai.CameraBoardSocket.CAM_A)\n    elif CAM_GROUP == \"LR\":\n        left.setBoardSocket(dai.CameraBoardSocket.CAM_B)\n        right.setBoardSocket(dai.CameraBoardSocket.CAM_C)\n    elif CAM_GROUP == \"RC\":\n        left.setBoardSocket(dai.CameraBoardSocket.CAM_A)\n        right.setBoardSocket(dai.CameraBoardSocket.CAM_C)\n\n    stereo.setDefaultProfilePreset(dai.node.StereoDepth.PresetMode.HIGH_DENSITY)\n    stereo.initialConfig.setMedianFilter(dai.MedianFilter.MEDIAN_OFF)\n    # LR-check is required for depthQueueData alignment\n    stereo.setLeftRightCheck(LR_CHECK)\n    stereo.setExtendedDisparity(EXTENDED_DISPARITY)\n    stereo.setSubpixel(SUBPIXEL)\n\n    # stereo.setDepthAlign(dai.CameraBoardSocket.RGB)\n\n    # Config\n    config.depthThresholds.lowerThreshold = 0\n    config.depthThresholds.upperThreshold = 100_000  # mm\n    config.calculationAlgorithm = calculation_algorithm\n    config.roi = dai.Rect(top_left, bottom_right)\n\n    spatialLocationCalculator.inputConfig.setWaitForMessage(False)\n    spatialLocationCalculator.initialConfig.addROI(config)\n\n    # Linking\n    stereo.syncedRight.link(sync.inputs[\"image\"])\n\n    left.isp.link(stereo.left)\n    right.isp.link(stereo.right)\n\n    stereo.disparity.link(sync.inputs[\"disparity\"])\n    stereo.depth.link(spatialLocationCalculator.inputDepth)\n    spatialLocationCalculator.passthroughDepth.link(sync.inputs[\"depth\"])\n\n    spatialLocationCalculator.out.link(xoutSpatialData.input)\n\n    xinSpatialCalcConfig.out.link(spatialLocationCalculator.inputConfig)\n\n    return pipeline, stereo.initialConfig.getMaxDisparity()\n\n\ndef check_input(roi, frame, DELTA=5):\n    \"\"\"Check if input is ROI or point. If point, convert to ROI\"\"\"\n    # Convert to a numpy array if input is a list\n    if isinstance(roi, list):\n        roi = np.array(roi)\n\n    # Limit the point so ROI won't be outside the frame\n    if roi.shape in {(2,), (2, 1)}:\n        roi = np.hstack([roi, np.array([[-DELTA, -DELTA], [DELTA, DELTA]])])\n    elif roi.shape in {(4,), (4, 1)}:\n        roi = np.array(roi)\n\n    roi.clip([DELTA, DELTA], [frame.shape[1] - DELTA, frame.shape[0] - DELTA])\n\n    return roi / frame.shape[1::-1]\n\n\ndef click_and_crop(event, x, y, flags, param):\n    \"\"\"\n    \u200b\u5355\u51fb\u200b\u9f20\u6807\u200b\u5de6\u952e\u200b\u65f6\u200b\u8bb0\u5f55\u200b\u8d77\u59cb\u200b (x, y) \u200b\u5750\u6807\u200b\uff0c\u200b\u91ca\u653e\u200b\u9f20\u6807\u200b\u5de6\u952e\u200b\u65f6\u200b\u8bb0\u5f55\u200b\u7ed3\u675f\u200b (x, y) \u200b\u5750\u6807\u200b\u3002\u200b\u4ee5\u200b numpy \u200b\u6570\u7ec4\u200b\u5f62\u5f0f\u200b\u8fd4\u56de\u200b\u5750\u6807\u200b\u3002\n\n    Args:\n        event (int): \u200b\u9f20\u6807\u200b\u4e8b\u4ef6\u200b\u7c7b\u578b\u200b\u3002\n        x (int): \u200b\u9f20\u6807\u200b\u4e8b\u4ef6\u200b\u7684\u200b x \u200b\u5750\u6807\u200b\u3002\n        y (int): \u200b\u9f20\u6807\u200b\u4e8b\u4ef6\u200b\u7684\u200b y \u200b\u5750\u6807\u200b\u3002\n        flags (int): \u200b\u9f20\u6807\u200b\u4e8b\u4ef6\u200b\u7684\u200b\u4efb\u4f55\u200b\u76f8\u5173\u200b\u6807\u5fd7\u200b\u3002\n        param (object): \u200b\u9f20\u6807\u200b\u4e8b\u4ef6\u200b\u7684\u200b\u4efb\u4f55\u200b\u76f8\u5173\u200b\u53c2\u6570\u200b\u3002\n\n    Returns:\n        numpy.ndarray: \u200b\u9f20\u6807\u200b\u4e8b\u4ef6\u200b\u7684\u200b\u5750\u6807\u200b\u4f5c\u4e3a\u200b numpy \u200b\u6570\u7ec4\u200b\u3002\n    \"\"\"\n    # grab references to the global variables\n    global ref_pt, click_roi  # noqa: PLW0603\n    # if the left mouse button was clicked, record the starting\n    # (x, y) coordinates and indicate that cropping is being\n    # performed\n    if event == cv2.EVENT_LBUTTONDOWN:\n        ref_pt = [(x, y)]\n    # check to see if the left mouse button was released\n    elif event == cv2.EVENT_LBUTTONUP:\n        # record the ending (x, y) coordinates and indicate that\n        # the cropping operation is finished\n        ref_pt.append((x, y))\n        ref_pt = np.array(ref_pt)\n        click_roi = np.array([np.min(ref_pt, axis=0), np.max(ref_pt, axis=0)])\n\n\ndef run():  # noqa: PLR0912, PLR0914, PLR0915, C901\n    global ref_pt, click_roi, calculation_algorithm, config  # noqa: PLW0603, PLW0602\n    CALCULATION_ALGORITHMS = {\n        ord(\"1\"): dai.SpatialLocationCalculatorAlgorithm.MEAN,\n        ord(\"2\"): dai.SpatialLocationCalculatorAlgorithm.MIN,\n        ord(\"3\"): dai.SpatialLocationCalculatorAlgorithm.MAX,\n        ord(\"4\"): dai.SpatialLocationCalculatorAlgorithm.MODE,\n        ord(\"5\"): dai.SpatialLocationCalculatorAlgorithm.MEDIAN,\n    }\n\n    # Connect to device and start pipeline\n    with dai.Device() as device:\n        pipeline, maxDisparity = create_pipeline()\n        device.startPipeline(pipeline)\n\n        frameRgb = None\n        frameDisp = None\n        depthDatas = []\n        stepSize = 0.01\n        newConfig = False\n\n        # Configure windows; trackbar adjusts blending ratio of rgb/depthQueueData\n        rgbWindowName = \"image\"\n        depthWindowName = \"depthQueueData\"\n        cv2.namedWindow(rgbWindowName)\n        cv2.namedWindow(depthWindowName)\n\n        cv2.setMouseCallback(rgbWindowName, click_and_crop)\n        cv2.setMouseCallback(depthWindowName, click_and_crop)\n\n        print(\"Use WASD keys to move ROI!\")\n\n        spatialCalcConfigInQueue = device.getInputQueue(\"spatialCalcConfig\")\n        spatialDataQueue = device.getOutputQueue(\"spatialData\")\n        q = device.getOutputQueue(name=\"out\", maxSize=4, blocking=False)\n\n        def draw_text(frame, text, org, color=(255, 255, 255), thickness=1):\n            cv2.putText(frame, text, org, cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), thickness + 3, cv2.LINE_AA)\n            cv2.putText(frame, text, org, cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, thickness, cv2.LINE_AA)\n\n        def draw_rect(frame, topLeft, bottomRight, color=(255, 255, 255), thickness=1):\n            cv2.rectangle(frame, topLeft, bottomRight, (0, 0, 0), thickness + 3)\n            cv2.rectangle(frame, topLeft, bottomRight, color, thickness)\n\n        def draw_spatial_locations(frame, spatialLocations):\n            for depthData in spatialLocations:\n                roi = depthData.config.roi\n                roi = roi.denormalize(width=frame.shape[1], height=frame.shape[0])\n                xmin = int(roi.topLeft().x)\n                ymin = int(roi.topLeft().y)\n                xmax = int(roi.bottomRight().x)\n                ymax = int(roi.bottomRight().y)\n\n                cv2.rectangle(frame, (xmin, ymin), (xmax, ymax), (0, 0, 0), 4)\n                cv2.rectangle(frame, (xmin, ymin), (xmax, ymax), (255, 255, 255), 1)\n                draw_rect(\n                    frame,\n                    (xmin, ymin),\n                    (xmax, ymax),\n                )\n                draw_text(\n                    frame,\n                    f\"X: {int(depthData.spatialCoordinates.x)} mm\",\n                    (xmin + 10, ymin + 20),\n                )\n                draw_text(\n                    frame,\n                    f\"Y: {int(depthData.spatialCoordinates.y)} mm\",\n                    (xmin + 10, ymin + 35),\n                )\n                draw_text(\n                    frame,\n                    f\"Z: {int(depthData.spatialCoordinates.z)} mm\",\n                    (xmin + 10, ymin + 50),\n                )\n\n        fps = FPSHandler()\n        while not device.isClosed():\n            inMessage = q.tryGet()\n            spatialData = spatialDataQueue.tryGet()\n\n            if spatialData is not None:\n                depthDatas = spatialData.getSpatialLocations()\n\n            if inMessage is not None:\n                imageData = inMessage[\"image\"]\n                fps.tick(\"image\")\n\n                frameRgb = imageData.getCvFrame()\n                fps.draw_fps(frameRgb, \"image\")\n                draw_spatial_locations(frameRgb, depthDatas)\n\n                dispData = inMessage[\"disparity\"]\n                fps.tick(\"dispData\")\n                frameDisp = dispData.getFrame()\n                frameDisp = (frameDisp * (255 / maxDisparity)).astype(np.uint8)\n                frameDisp = cv2.applyColorMap(frameDisp, cv2.COLORMAP_JET)\n                frameDisp = np.ascontiguousarray(frameDisp)\n                draw_spatial_locations(frameDisp, depthDatas)\n                fps.draw_fps(frameDisp, \"dispData\")\n\n                # Blend when both received\n            if frameRgb is not None and frameDisp is not None:\n                if click_roi is not None:\n                    (\n                        [top_left.x, top_left.y],\n                        [\n                            bottom_right.x,\n                            bottom_right.y,\n                        ],\n                    ) = check_input(click_roi, frameRgb)\n                    click_roi = None\n                    newConfig = True\n\n                cv2.imshow(depthWindowName, frameDisp)\n                cv2.imshow(rgbWindowName, frameRgb)\n\n            key = cv2.waitKey(1)\n            if key == ord(\"q\"):\n                break\n            if key == ord(\"w\"):\n                if top_left.y - stepSize &gt;= 0:\n                    top_left.y -= stepSize\n                    bottom_right.y -= stepSize\n                    newConfig = True\n            elif key == ord(\"a\"):\n                if top_left.x - stepSize &gt;= 0:\n                    top_left.x -= stepSize\n                    bottom_right.x -= stepSize\n                    newConfig = True\n            elif key == ord(\"s\"):\n                if bottom_right.y + stepSize &lt;= 1:\n                    top_left.y += stepSize\n                    bottom_right.y += stepSize\n                    newConfig = True\n            elif key == ord(\"d\"):\n                if bottom_right.x + stepSize &lt;= 1:\n                    top_left.x += stepSize\n                    bottom_right.x += stepSize\n                    newConfig = True\n\n            elif key in CALCULATION_ALGORITHMS:\n                calculation_algorithm = CALCULATION_ALGORITHMS[key]\n                print(f\"Switching calculation algorithm to {calculation_algorithm.name}!\")\n                newConfig = True\n\n            elif key == ord(\"s\"):\n                file_path = root.joinpath(f\"{FILENAME}.png\")\n                depth_frame = inMessage[\"depth\"].getFrame()\n                cv2.imwrite(file_path.as_posix(), depth_frame, [cv2.IMWRITE_PNG_COMPRESSION, 0])\n                print(f\"Saved {file_path}\")\n\n            if newConfig:\n                # config.depthThresholds.lowerThreshold = 0\n                # config.depthThresholds.upperThreshold = 10000\n                config.roi = dai.Rect(top_left, bottom_right)\n                config.calculationAlgorithm = calculation_algorithm\n\n                cfg = dai.SpatialLocationCalculatorConfig()\n                cfg.addROI(config)\n                spatialCalcConfigInQueue.send(cfg)\n                newConfig = False\n\n\nif __name__ == \"__main__\":\n    ref_pt = None\n    click_roi = None\n    run()\n</code></pre>"},{"location":"oak/depth/depth_viewer_lr/#\u7528\u6cd5","title":"\u7528\u6cd5","text":"<p>\u200b\u5728\u200b\u547d\u4ee4\u884c\u200b\u4e2d\u200b\u8fd0\u884c\u200b\u811a\u672c\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u53c2\u6570\u200b\u81ea\u5b9a\u4e49\u200b\u5355\u76ee\u200b\u76f8\u673a\u200b\u5e27\u200b\u7387\u200b\u548c\u200b\u6df1\u5ea6\u200b\u76f8\u673a\u200b\u5bf9\u200b\u3002</p> <p>\u200b\u811a\u672c\u200b\u5c06\u200b\u8fde\u63a5\u200b\u5230\u200b\u6df1\u5ea6\u200b\u6444\u50cf\u5934\u200b\u8bbe\u5907\u200b\u5e76\u200b\u542f\u52a8\u200b\u6570\u636e\u6d41\u200b\u3002\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u952e\u76d8\u200b\u6309\u952e\u200b\u8fdb\u884c\u200b\u64cd\u4f5c\u200b\uff1a</p> <ul> <li><code>q</code>\uff1a\u200b\u9000\u51fa\u200b\u7a0b\u5e8f\u200b</li> <li><code>w</code>\uff1a\u200b\u5411\u4e0a\u200b\u79fb\u52a8\u200b ROI</li> <li><code>a</code>\uff1a\u200b\u5411\u200b\u5de6\u200b\u79fb\u52a8\u200b ROI</li> <li><code>s</code>\uff1a\u200b\u5411\u4e0b\u200b\u79fb\u52a8\u200b ROI</li> <li><code>d</code>\uff1a\u200b\u5411\u200b\u53f3\u200b\u79fb\u52a8\u200b ROI</li> <li><code>1-5</code>\uff1a\u200b\u5207\u6362\u200b\u8ba1\u7b97\u200b\u7b97\u6cd5\u200b</li> </ul> <pre><code>python depth_viewer_lr.py --fps 30 --stereo_pair LR\n</code></pre>"},{"location":"oak/depth/depth_viewer_lr/#\u53ef\u7528\u53c2\u6570","title":"\u53ef\u7528\u200b\u53c2\u6570","text":"<ul> <li><code>-sp</code>, <code>--stereo_pair</code>\uff1a\u200b\u9009\u62e9\u200b\u6df1\u5ea6\u200b\u76f8\u673a\u200b\u5bf9\u200b\uff08LR\u3001LC\u3001CR\uff09</li> <li><code>-f</code>, <code>--fps</code>\uff1a\u200b\u76f8\u673a\u200b\u5e27\u200b\u7387\u200b</li> <li><code>-f</code>, <code>--filename</code>\uff1a\u200b\u8f93\u51fa\u200b\u6df1\u5ea6\u200b\u6570\u636e\u200b\u6587\u4ef6\u540d\u200b (\u200b\u4e0d\u200b\u542b\u200b\u540e\u7f00\u200b)</li> <li>... [\u200b\u4ee5\u53ca\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b]</li> </ul>"},{"location":"oak/depth/depth_viewer_lr/#\u4fdd\u5b58\u6df1\u5ea6\u5e27","title":"\u4fdd\u5b58\u200b\u6df1\u5ea6\u200b\u5e27","text":"<p>\u200b\u6309\u4e0b\u200b 's' \u200b\u952e\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u5f53\u524d\u200b\u663e\u793a\u200b\u7684\u200b\u6df1\u5ea6\u200b\u5e27\u200b\u4fdd\u5b58\u200b\u4e3a\u200b PNG \u200b\u56fe\u50cf\u200b\uff0c\u200b\u4fdd\u5b58\u200b\u4f4d\u7f6e\u200b\u5728\u200b\u811a\u672c\u200b\u6587\u4ef6\u200b\u6240\u5728\u200b\u7684\u200b\u76ee\u5f55\u200b\u3002</p>"},{"location":"oak/depth/depth_viewer_lr/#\u793a\u4f8b","title":"\u793a\u4f8b","text":"<p>\u200b\u542f\u52a8\u200b\u6df1\u5ea6\u200b\u67e5\u770b\u5668\u200b\u5e76\u200b\u4fdd\u5b58\u200b\u6df1\u5ea6\u200b\u5e27\u200b\uff1a</p> <pre><code>python depth_viewer_lr.py\n</code></pre> <p>\u200b\u8fd0\u884c\u200b\u540e\u200b\uff0c\u200b\u6309\u200b 's' \u200b\u952e\u200b\u5373\u53ef\u200b\u5728\u200b\u811a\u672c\u200b\u6240\u5728\u200b\u76ee\u5f55\u200b\u4e0b\u200b\u4fdd\u5b58\u200b\u540d\u4e3a\u200b \"depth_lr.png\" \u200b\u7684\u200b\u6df1\u5ea6\u200b\u5e27\u200b\u3002</p>"},{"location":"oak/depth/depth_viewer_lr/#\u5e38\u89c1\u95ee\u9898\u89e3\u7b54","title":"\u5e38\u89c1\u200b\u95ee\u9898\u89e3\u7b54","text":"<p>Q: \u200b\u8be5\u200b\u811a\u672c\u200b\u652f\u6301\u200b\u54ea\u4e9b\u200b\u6df1\u5ea6\u200b\u6444\u50cf\u5934\u200b\u8bbe\u5907\u200b\uff1f</p> <p>A: \u200b\u8be5\u200b\u811a\u672c\u200b\u4f7f\u7528\u200b depthai \u200b\u5e93\u200b\uff0c\u200b\u652f\u6301\u200b OAK-D-LR \u200b\u4ee5\u53ca\u200b\u4f7f\u7528\u200b AR0234 \u200b\u76f8\u673a\u200b\u6a21\u7ec4\u200b\u7684\u200b OAK-FFC\u3002</p> <p>Q: \u200b\u5982\u4f55\u200b\u66f4\u6539\u200b\u611f\u5174\u8da3\u200b\u533a\u57df\u200b\uff08ROI\uff09\uff1f</p> <p>A: \u200b\u6309\u4e0b\u200b\u952e\u76d8\u200b\u4e0a\u200b\u7684\u200b <code>w\u3001a\u3001s\u3001d</code> \u200b\u952e\u200b\u53ef\u4ee5\u200b\u79fb\u52a8\u200b ROI \u3002</p> <p>Q: \u200b\u5982\u4f55\u200b\u5207\u6362\u200b\u8ba1\u7b97\u200b\u7b97\u6cd5\u200b\uff1f</p> <p>A: \u200b\u6309\u4e0b\u200b\u952e\u76d8\u200b\u4e0a\u200b\u7684\u200b <code>1\u30012\u30013\u30014\u30015</code> \u200b\u952e\u200b\u53ef\u4ee5\u200b\u5207\u6362\u200b\u8ba1\u7b97\u200b\u7b97\u6cd5\u200b\u3002</p>"},{"location":"oak/pointcloud/point_cloud_viewer/","title":"DepthAI \u200b\u70b9\u4e91\u200b\u67e5\u770b\u5668","text":""},{"location":"oak/pointcloud/point_cloud_viewer/#\u4ecb\u7ecd","title":"\u4ecb\u7ecd","text":"<p>\u200b\u672c\u200b\u811a\u672c\u200b\u5141\u8bb8\u200b\u7528\u6237\u200b\u901a\u8fc7\u200b\u517c\u5bb9\u200b DepthAI \u200b\u7684\u200b\u786c\u4ef6\u200b\u6355\u83b7\u200b 3D \u200b\u70b9\u4e91\u200b\u6570\u636e\u200b\uff0c\u200b\u5e76\u200b\u4f7f\u7528\u200b Open3D \u200b\u5b9e\u73b0\u200b\u5b9e\u65f6\u200b\u53ef\u89c6\u5316\u200b\u3002\u200b\u8be5\u200b\u811a\u672c\u200b\u7684\u200b\u4e00\u4e2a\u200b\u91cd\u8981\u200b\u529f\u80fd\u200b\u662f\u200b\u80fd\u591f\u200b\u5c06\u200b\u6355\u83b7\u200b\u7684\u200b\u70b9\u4e91\u4ee5\u200b\u591a\u79cd\u200b\u683c\u5f0f\u200b\u4fdd\u5b58\u200b\u5230\u200b\u78c1\u76d8\u200b\u4e0a\u200b\u3002</p>"},{"location":"oak/pointcloud/point_cloud_viewer/#\u524d\u63d0\u6761\u4ef6\u548c\u4f9d\u8d56\u5173\u7cfb","title":"\u524d\u63d0\u6761\u4ef6\u200b\u548c\u200b\u4f9d\u8d56\u200b\u5173\u7cfb","text":"<p>\u200b\u786e\u4fdd\u200b\u4f60\u200b\u7684\u200b\u7cfb\u7edf\u200b\u6ee1\u8db3\u200b\u4ee5\u4e0b\u200b\u8981\u6c42\u200b\uff1a</p> <ul> <li>\u200b\u517c\u5bb9\u200b DepthAI \u200b\u7684\u200b\u786c\u4ef6\u200b\u8bbe\u5907\u200b\uff08\u200b\u4f8b\u5982\u200b OAK-D \u200b\u76f8\u673a\u200b\uff09</li> <li>Python 3.x \u200b\u73af\u5883\u200b</li> <li>\u200b\u5fc5\u8981\u200b\u7684\u200b Python \u200b\u5e93\u200b\uff1adepthai, opencv-python, numpy, open3d</li> </ul>"},{"location":"oak/pointcloud/point_cloud_viewer/#\u5b89\u88c5","title":"\u5b89\u88c5","text":"<p>\u200b\u5728\u200b\u7ec8\u7aef\u200b\u6216\u200b\u547d\u4ee4\u63d0\u793a\u7b26\u200b\u4e2d\u200b\u8fd0\u884c\u200b\u4ee5\u4e0b\u200b\u547d\u4ee4\u200b\u4ee5\u200b\u5b89\u88c5\u200b\u6240\u200b\u9700\u5e93\u200b\uff1a <pre><code>pip install depthai opencv-python numpy open3d\n</code></pre></p>"},{"location":"oak/pointcloud/point_cloud_viewer/#\u6e90\u7801","title":"\u6e90\u7801","text":"point_cloud_viewer.py <pre><code># coding=utf-8\nimport argparse\nimport time\nfrom pathlib import Path\n\nimport cv2\nimport depthai as dai\nimport numpy as np\nimport open3d as o3d\n\nroot = Path(__file__).parent.resolve()\n\n# \u200b\u89e3\u6790\u200b\u547d\u4ee4\u884c\u200b\u53c2\u6570\u200b\nparser = argparse.ArgumentParser(description=\"DepthAI Point Cloud Viewer\")\nparser.add_argument(\n    \"-mres\",\n    \"--mono_resolution\",\n    type=str,\n    default=\"400p\",\n    choices={\"480p\", \"400p\", \"720p\", \"800p\", \"1200p\"},\n    help=\"\u200b\u9009\u62e9\u200b\u5355\u76ee\u200b\u76f8\u673a\u200b\u5206\u8fa8\u7387\u200b\uff08\u200b\u9ad8\u5ea6\u200b\uff09\u3002 \uff08\u200b\u9ed8\u8ba4\u200b\uff1a%(default)s\uff09\",\n)\nparser.add_argument(\n    \"-cres\",\n    \"--color_resolution\",\n    default=\"1080p\",\n    choices={\n        \"720p\",\n        \"800p\",\n        \"1080p\",\n        \"1200p\",\n        \"4k\",\n        \"5mp\",\n        \"12mp\",\n        \"13mp\",\n        \"48mp\",\n        \"1352X1012\",\n        \"1440X1080\",\n        \"2024X1520\",\n        \"4000X3000\",\n        \"5312X6000\",\n    },\n    help=\"\u200b\u9009\u62e9\u200b\u5f69\u8272\u200b\u76f8\u673a\u200b\u5206\u8fa8\u7387\u200b/\u200b\u9ad8\u5ea6\u200b\u3002 \uff08\u200b\u9ed8\u8ba4\u200b\uff1a%(default)s\uff09\",\n)\nparser.add_argument(\n    \"-ds\",\n    \"--isp_downscale\",\n    nargs=2,\n    default=[1, 3],\n    type=int,\n    help=\"\u200b\u5c06\u200b ISP \u200b\u8f93\u51fa\u200b\u6309\u6b64\u200b\u56e0\u5b50\u200b\u964d\u4f4e\u200b\u91c7\u6837\u7387\u200b\uff08\u200b\u9ed8\u8ba4\u200b\uff1a%(default)s\uff09\",\n)\n\nparser.add_argument(\n    \"-f\",\n    \"--fps\",\n    type=int,\n    default=30,\n    help=\"\u200b\u76f8\u673a\u200b\u5e27\u200b\u7387\u200b\uff08\u200b\u9ed8\u8ba4\u200b\uff1a%(default)s\uff09\",\n)\n\nparser.add_argument(\n    \"-e\",\n    \"--extended_disparity\",\n    default=False,\n    action=\"store_true\",\n    help=\"\u200b\u542f\u7528\u200b\u6269\u5c55\u200b\u89c6\u5dee\u200b\uff0c\u200b\u6700\u5c0f\u200b\u6df1\u5ea6\u200b\u8d8a\u8fd1\u200b\uff0c\u200b\u89c6\u5dee\u200b\u8303\u56f4\u200b\u52a0\u500d\u200b\uff08\u200b\u4ece\u200b 95 \u200b\u5230\u200b 190\uff09\uff08\u200b\u9ed8\u8ba4\u200b\uff1a%(default)s\uff09\",\n)\nparser.add_argument(\n    \"-ne\",\n    \"--no_extended_disparity\",\n    default=False,\n    action=\"store_true\",\n    help=\"\u200b\u7981\u7528\u200b\u6269\u5c55\u200b\u89c6\u5dee\u200b\uff0c\u200b\u6700\u5c0f\u200b\u6df1\u5ea6\u200b\u8d8a\u8fd1\u200b\uff0c\u200b\u89c6\u5dee\u200b\u8303\u56f4\u200b\u52a0\u500d\u200b\uff08\u200b\u4ece\u200b 95 \u200b\u5230\u200b 190\uff09\uff08\u200b\u9ed8\u8ba4\u200b\uff1a%(default)s\uff09\",\n)\nparser.add_argument(\n    \"-sub\",\n    \"--subpixel\",\n    default=True,\n    action=\"store_true\",\n    help=\"\u200b\u4f7f\u7528\u200b\u4e9a\u200b\u50cf\u7d20\u200b\u63d2\u503c\u200b\uff08\u200b\u9ed8\u8ba4\u200b\uff1a%(default)s\uff09\",\n)\nparser.add_argument(\n    \"-nsub\",\n    \"--no_subpixel\",\n    action=\"store_true\",\n    help=\"\u200b\u7981\u7528\u200b\u4e9a\u200b\u50cf\u7d20\u200b\u63d2\u503c\u200b\uff08\u200b\u9ed8\u8ba4\u200b\uff1a%(default)s\uff09\",\n)\nparser.add_argument(\n    \"-l\",\n    \"--lr_check\",\n    # default=True,\n    action=\"store_false\",\n    help=\"\u200b\u5de6\u200b/\u200b\u53f3\u200b\u89c6\u5dee\u200b\u68c0\u67e5\u200b\uff08\u200b\u9ed8\u8ba4\u200b\uff1a%(default)s\uff09\",\n)\nparser.add_argument(\n    \"-file\",\n    \"--filename\",\n    type=str,\n    default=\"point_cloud\",\n    help=\"\u200b\u8f93\u51fa\u200b PLY \u200b\u6587\u4ef6\u540d\u200b\uff08\u200b\u9ed8\u8ba4\u200b\uff1a%(default)s\uff09\",\n)\nparser.add_argument(\n    \"-s\",\n    \"--sparse\",\n    action=\"store_true\",\n    help=\"\u200b\u542f\u7528\u200b\u6216\u200b\u7981\u7528\u200b\u7a00\u758f\u200b\u70b9\u4e91\u200b\u8ba1\u7b97\u200b\uff08\u200b\u9ed8\u8ba4\u200b\uff1a%(default)s\uff09\",\n)\nparser.add_argument(\n    \"-suf\",\n    \"--suffix\",\n    default=\"ply\",\n    choices={\"ply\", \"pcd\", \"xyz\", \"xyzrgb\"},\n    help=\"\u200b\u4fdd\u5b58\u200b\u70b9\u4e91\u200b\u6587\u4ef6\u200b\u540e\u7f00\u200b\uff08\u200b\u9ed8\u8ba4\u200b\uff1a%(default)s\uff09\",\n)\nargs = parser.parse_args()\n\n# \u200b\u5b9a\u4e49\u200b\u5355\u76ee\u200b\u548c\u200b\u5f69\u8272\u200b\u76f8\u673a\u200b\u7684\u200b\u5206\u8fa8\u7387\u200b\nmono_res_opts = {\n    \"400p\": dai.MonoCameraProperties.SensorResolution.THE_400_P,\n    \"480p\": dai.MonoCameraProperties.SensorResolution.THE_480_P,\n    \"720p\": dai.MonoCameraProperties.SensorResolution.THE_720_P,\n    \"800p\": dai.MonoCameraProperties.SensorResolution.THE_800_P,\n    \"1200p\": dai.MonoCameraProperties.SensorResolution.THE_1200_P,\n}\n\ncolor_res_opts = {\n    \"720p\": dai.ColorCameraProperties.SensorResolution.THE_720_P,\n    \"800p\": dai.ColorCameraProperties.SensorResolution.THE_800_P,\n    \"1080p\": dai.ColorCameraProperties.SensorResolution.THE_1080_P,\n    \"1200p\": dai.ColorCameraProperties.SensorResolution.THE_1200_P,\n    \"4k\": dai.ColorCameraProperties.SensorResolution.THE_4_K,\n    \"5mp\": dai.ColorCameraProperties.SensorResolution.THE_5_MP,\n    \"12mp\": dai.ColorCameraProperties.SensorResolution.THE_12_MP,\n    \"13mp\": dai.ColorCameraProperties.SensorResolution.THE_13_MP,\n    \"48mp\": dai.ColorCameraProperties.SensorResolution.THE_48_MP,\n    \"1352X1012\": dai.ColorCameraProperties.SensorResolution.THE_1352X1012,\n    \"1440X1080\": dai.ColorCameraProperties.SensorResolution.THE_1440X1080,\n    \"2024X1520\": dai.ColorCameraProperties.SensorResolution.THE_2024X1520,\n    \"4000X3000\": dai.ColorCameraProperties.SensorResolution.THE_4000X3000,\n    \"5312X6000\": dai.ColorCameraProperties.SensorResolution.THE_5312X6000,\n}\n\nMONO_RES = mono_res_opts.get(args.mono_resolution)\nCOLOR_RES = color_res_opts.get(args.color_resolution)\n\nFPS = args.fps\nSPARSE = args.sparse\nSUFFIX = args.suffix\nFILENAME = args.filename\nNUMERATOR, DENOMINATOR = args.isp_downscale\nEXTENDED_DISPARITY = args.extended_disparity\nif args.no_extended_disparity:\n    EXTENDED_DISPARITY = False\nSUBPIXEL = args.subpixel\nif args.no_subpixel:\n    SUBPIXEL = False\n\nLR_CHECK = args.lr_check\n\n\nclass FPSCounter:\n    def __init__(self):\n        self.frameCount = 0\n        self.fps = 0\n        self.startTime = time.time()\n\n    def tick(self):\n        self.frameCount += 1\n        if self.frameCount % 10 == 0:\n            elapsedTime = time.time() - self.startTime\n            self.fps = self.frameCount / elapsedTime\n            self.frameCount = 0\n            self.startTime = time.time()\n        return self.fps\n\n\ndef create_pipeline():\n    \"\"\"\u200b\u521b\u5efa\u200b DepthAI \u200b\u6d41\u6c34\u7ebf\u200b\"\"\"\n    pipeline = dai.Pipeline()\n    # \u200b\u521b\u5efa\u200b\u76f8\u673a\u200b\u8282\u70b9\u200b\n    camRgb = pipeline.create(dai.node.ColorCamera)\n    monoLeft = pipeline.create(dai.node.MonoCamera)\n    monoRight = pipeline.create(dai.node.MonoCamera)\n    # \u200b\u521b\u5efa\u200b\u6df1\u5ea6\u200b\u4f30\u8ba1\u200b\u548c\u200b\u70b9\u4e91\u200b\u8282\u70b9\u200b\n    depth = pipeline.create(dai.node.StereoDepth)\n    pointcloud = pipeline.create(dai.node.PointCloud)\n    # \u200b\u521b\u5efa\u200b\u540c\u6b65\u200b\u8282\u70b9\u200b\u548c\u200b\u8f93\u51fa\u200b\u8282\u70b9\u200b\n    sync = pipeline.create(dai.node.Sync)\n    xOut = pipeline.create(dai.node.XLinkOut)\n    xOut.input.setBlocking(False)\n\n    # \u200b\u8bbe\u7f6e\u200b\u76f8\u673a\u200b\u5c5e\u6027\u200b\n    camRgb.setResolution(COLOR_RES)\n    camRgb.setBoardSocket(dai.CameraBoardSocket.CAM_A)\n    camRgb.setIspScale(NUMERATOR, DENOMINATOR)\n    camRgb.setFps(FPS)\n\n    monoLeft.setResolution(MONO_RES)\n    monoLeft.setCamera(\"left\")\n    monoLeft.setFps(FPS)\n    monoRight.setResolution(MONO_RES)\n    monoRight.setCamera(\"right\")\n    monoRight.setFps(FPS)\n\n    # \u200b\u8bbe\u7f6e\u200b\u6df1\u5ea6\u200b\u4f30\u8ba1\u200b\u5c5e\u6027\u200b\n    depth.setDefaultProfilePreset(dai.node.StereoDepth.PresetMode.HIGH_DENSITY)\n    depth.initialConfig.setMedianFilter(dai.MedianFilter.KERNEL_7x7)\n    depth.setLeftRightCheck(LR_CHECK)\n    depth.setExtendedDisparity(EXTENDED_DISPARITY)\n    depth.setSubpixel(SUBPIXEL)\n    depth.setDepthAlign(dai.CameraBoardSocket.CAM_A)\n    depth.setOutputSize(*camRgb.getIspSize())\n\n    # \u200b\u8bbe\u7f6e\u200b\u70b9\u4e91\u200b\u5c5e\u6027\u200b\n    pointcloud.initialConfig.setSparse(SPARSE)\n\n    # \u200b\u5c06\u200b\u8282\u70b9\u200b\u8fde\u63a5\u8d77\u6765\u200b\n    monoLeft.out.link(depth.left)\n    monoRight.out.link(depth.right)\n    depth.depth.link(pointcloud.inputDepth)\n    camRgb.isp.link(sync.inputs[\"rgb\"])\n    pointcloud.outputPointCloud.link(sync.inputs[\"pcl\"])\n    sync.out.link(xOut.input)\n    xOut.setStreamName(\"out\")\n\n    return pipeline\n\n\ndef main():  # noqa: PLR0914, PLR0915\n    \"\"\"\u200b\u4e3b\u200b\u51fd\u6570\u200b\uff0c\u200b\u8fd0\u884c\u200b DepthAI \u200b\u70b9\u4e91\u200b\u67e5\u770b\u5668\u200b\"\"\"\n    pipeline = create_pipeline()\n    with dai.Device(pipeline) as device:\n        print(\"DepthAI \u200b\u70b9\u4e91\u200b\u67e5\u770b\u5668\u200b\u5df2\u200b\u542f\u52a8\u200b\uff01\")\n        print(\"\u200b\u6309\u200b `q`\u200b\u952e\u200b\u9000\u51fa\u200b\uff0c\u200b\u6309\u200b`s` \u200b\u952e\u200b\u4fdd\u5b58\u200b\u70b9\u4e91\u200b\u6570\u636e\u200b\u3002\")\n\n        isRunning = True\n\n        def key_callback(vis, action, mods):\n            global isRunning  # noqa: PLW0603\n            if action == 0:\n                isRunning = False\n\n        q = device.getOutputQueue(name=\"out\", maxSize=4, blocking=False)\n        vis = o3d.visualization.VisualizerWithKeyCallback()\n        vis.create_window()\n        vis.register_key_action_callback(81, key_callback)\n        pcd = o3d.geometry.PointCloud()\n        coordinateFrame = o3d.geometry.TriangleMesh.create_coordinate_frame(size=1000, origin=[0, 0, 0])\n        vis.add_geometry(coordinateFrame)\n\n        first = True\n        fpsCounter = FPSCounter()\n        while isRunning:\n            inMessage = q.get()\n            inColor = inMessage[\"rgb\"]\n            inPointCloud = inMessage[\"pcl\"]\n            if inColor is not None:\n                cvColorFrame = inColor.getCvFrame()\n                # \u200b\u5c06\u200b\u5e27\u200b\u8f6c\u6362\u200b\u4e3a\u200b RGB \u200b\u683c\u5f0f\u200b\n                cvRGBFrame = cv2.cvtColor(cvColorFrame, cv2.COLOR_BGR2RGB)\n                fps = fpsCounter.tick()\n                # \u200b\u5728\u200b\u5e27\u200b\u4e0a\u200b\u663e\u793a\u200b FPS\n                cv2.putText(\n                    cvColorFrame,\n                    f\"FPS: {fps:.2f}\",\n                    (10, 30),\n                    cv2.FONT_HERSHEY_SIMPLEX,\n                    1,\n                    (0, 0, 255),\n                    2,\n                )\n                cv2.imshow(\"color\", cvColorFrame)\n\n            if inPointCloud:\n                time.time()\n                points = inPointCloud.getPoints().astype(np.float64)\n                pcd.points = o3d.utility.Vector3dVector(points)\n                colors = (cvRGBFrame.reshape(-1, 3) / 255.0).astype(np.float64)\n                pcd.colors = o3d.utility.Vector3dVector(colors)\n                if first:\n                    vis.add_geometry(pcd)\n                    first = False\n                else:\n                    vis.update_geometry(pcd)\n            vis.poll_events()\n            vis.update_renderer()\n\n            key = cv2.waitKey(1) &amp; 0xFF\n            if key == ord(\"q\"):\n                break\n            if key == ord(\"s\"):\n                file_path = root.joinpath(f\"{FILENAME}.{SUFFIX}\")\n                o3d.io.write_point_cloud(file_path.as_posix(), pcd)\n                print(f\"\u200b\u5c06\u200b\u70b9\u4e91\u200b\u4fdd\u5b58\u200b\u4e3a\u200b {file_path}\")\n\n        cv2.destroyAllWindows()\n        vis.destroy_window()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"oak/pointcloud/point_cloud_viewer/#\u7528\u6cd5","title":"\u7528\u6cd5","text":"<p>\u200b\u8fd0\u884c\u200b\u811a\u672c\u200b\u5e76\u200b\u901a\u8fc7\u200b\u547d\u4ee4\u884c\u200b\u53c2\u6570\u200b\u81ea\u5b9a\u4e49\u200b\u8bbe\u7f6e\u200b\uff0c\u200b\u4f8b\u5982\u200b\u8bbe\u7f6e\u200b\u76f8\u673a\u200b\u5206\u8fa8\u7387\u200b\u548c\u200b\u5e27\u200b\u7387\u200b\uff1a <pre><code>python point_cloud_viewer.py --mono_resolution 400p --color_resolution 1080p --fps 30\n</code></pre></p>"},{"location":"oak/pointcloud/point_cloud_viewer/#\u53ef\u7528\u53c2\u6570","title":"\u53ef\u7528\u200b\u53c2\u6570","text":"<ul> <li><code>-mres</code>, <code>--mono_resolution</code>\uff1a\u200b\u5355\u76ee\u200b\u76f8\u673a\u200b\u5206\u8fa8\u7387\u200b\uff08\u200b\u9ad8\u5ea6\u200b\uff0c\u200b\u5355\u4f4d\u200b\uff1a\u200b\u50cf\u7d20\u200b\uff09</li> <li><code>-cres</code>, <code>--color_resolution</code>\uff1a\u200b\u5f69\u8272\u200b\u76f8\u673a\u200b\u5206\u8fa8\u7387\u200b</li> <li><code>-f</code>, <code>--fps</code>\uff1a\u200b\u76f8\u673a\u200b\u5e27\u200b\u7387\u200b</li> <li><code>-f</code>, <code>--filename</code>\uff1a\u200b\u8f93\u51fa\u200b PLY \u200b\u6587\u4ef6\u540d\u200b (\u200b\u4e0d\u200b\u542b\u200b\u540e\u7f00\u200b)</li> <li><code>-suf</code>\uff0c <code>--suffix</code>\uff1a\u200b\u8f93\u51fa\u200b PLY \u200b\u540e\u7f00\u540d\u200b</li> <li>... [\u200b\u5305\u62ec\u200b\u6240\u6709\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\u53ca\u5176\u200b\u89e3\u91ca\u200b]</li> </ul>"},{"location":"oak/pointcloud/point_cloud_viewer/#\u4fdd\u5b58\u70b9\u4e91","title":"\u4fdd\u5b58\u200b\u70b9\u4e91","text":"<p>\u200b\u811a\u672c\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4fdd\u5b58\u200b\u6355\u83b7\u200b\u7684\u200b\u70b9\u4e91\u200b\u6570\u636e\u200b\u7684\u200b\u529f\u80fd\u200b\u3002\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u6309\u200b 's' \u200b\u952e\u6765\u200b\u89e6\u53d1\u200b\u4fdd\u5b58\u200b\u8fc7\u7a0b\u200b\uff0c\u200b\u5e76\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b <code>--output</code> \u200b\u53c2\u6570\u200b\u81ea\u5b9a\u4e49\u200b\u4fdd\u5b58\u200b\u7684\u200b\u6587\u4ef6\u540d\u200b\u548c\u200b <code>--pointcloud</code> \u200b\u53c2\u6570\u200b\u6765\u200b\u6307\u5b9a\u200b\u6587\u4ef6\u683c\u5f0f\u200b\u3002</p> <p>\u200b\u652f\u6301\u200b\u7684\u200b\u70b9\u4e91\u200b\u683c\u5f0f\u200b\u6709\u200b\uff1a</p> <ul> <li>PLY\uff08\u200b\u9ed8\u8ba4\u200b\uff09</li> <li>PCD</li> <li>XYZ</li> <li>XYZRGB</li> </ul>"},{"location":"oak/pointcloud/point_cloud_viewer/#\u793a\u4f8b","title":"\u793a\u4f8b","text":"<p>\u200b\u542f\u52a8\u200b\u67e5\u770b\u5668\u200b\u5e76\u200b\u5c06\u200b\u70b9\u4e91\u200b\u6570\u636e\u200b\u4fdd\u5b58\u200b\u4e3a\u200b\u9ed8\u8ba4\u200b\u7684\u200b PLY \u200b\u683c\u5f0f\u200b\uff1a <pre><code>python point_cloud_viewer.py --output my_point_cloud\n</code></pre></p> <p>\u200b\u542f\u52a8\u200b\u67e5\u770b\u5668\u200b\u5e76\u200b\u5c06\u200b\u70b9\u4e91\u200b\u6570\u636e\u200b\u4fdd\u5b58\u200b\u4e3a\u200b PCD \u200b\u683c\u5f0f\u200b\uff1a <pre><code>python point_cloud_viewer.py --output my_point_cloud -p pcd\n</code></pre> \u200b\u5f53\u200b\u4f60\u200b\u6309\u200b\u4e0b\u200b 's' \u200b\u952e\u65f6\u200b\uff0c\u200b\u70b9\u4e91\u200b\u5c06\u200b\u4fdd\u5b58\u200b\u5230\u200b\u811a\u672c\u200b\u6587\u4ef6\u200b\u6240\u5728\u200b\u76ee\u5f55\u200b\u4e0b\u200b\uff0c\u200b\u6587\u4ef6\u540d\u200b\u4e3a\u200b my_point_cloud.pcd\u3002</p>"},{"location":"oak/pointcloud/point_cloud_viewer/#\u5e38\u89c1\u95ee\u9898\u89e3\u7b54","title":"\u5e38\u89c1\u200b\u95ee\u9898\u89e3\u7b54","text":"<p>\u200b\u95ee\u200b\uff1a\u200b\u5982\u679c\u200b\u6536\u5230\u200b\u5173\u4e8e\u200b\u7f3a\u5c11\u200b Open3D \u200b\u7684\u200b\u9519\u8bef\u200b\u600e\u4e48\u529e\u200b\uff1f</p> <p>\u200b\u7b54\u200b\uff1a\u200b\u786e\u4fdd\u60a8\u200b\u5df2\u7ecf\u200b\u4f7f\u7528\u200b\u7ed9\u51fa\u200b\u7684\u200b\u5b89\u88c5\u200b\u547d\u4ee4\u200b\u5b89\u88c5\u200b\u4e86\u200b\u6240\u6709\u200b\u4f9d\u8d56\u200b\u9879\u200b\u3002</p>"},{"location":"oak/yolo/depthai_yolo/","title":"\u57fa\u4e8e\u200b\u8bbe\u5907\u200b\u4e0a\u200b\u89e3\u7801\u200b\u7684\u200b Yolo \u200b\u68c0\u6d4b","text":"<p>\u200b\u8be5\u200b\u5b58\u50a8\u200b\u5e93\u200b ( \u200b\u4fee\u6539\u200b\u81ea\u200b device-decoding) \u200b\u5305\u542b\u200b\u76f4\u63a5\u200b\u4f7f\u7528\u200b DepthAI SDK (<code>main_sdk.py</code>) \u200b\u6216\u200b DepthAI API (<code>main_api.py</code>) \u200b\u5728\u200b\u8bbe\u5907\u200b\u4e0a\u200b\u89e3\u7801\u200b\u8fd0\u884c\u200b Yolo \u200b\u76ee\u6807\u200b\u68c0\u6d4b\u200b\u7684\u200b\u4ee3\u7801\u200b\u3002\u200b\u76ee\u524d\u200b\uff0c\u200b\u652f\u6301\u200b\u7684\u200b\u7248\u672c\u200b\u6709\u200b\uff1a</p> <ul> <li><code>YoloV3</code> &amp; <code>YoloV3-tiny</code>,</li> <li><code>YoloV4</code> &amp; <code>YoloV4-tiny</code>,</li> <li><code>YoloV5</code>,</li> <li><code>YoloV6</code>,</li> <li><code>YoloV7</code>,</li> <li><code>YoloV8</code>,</li> <li><code>YoloV9</code>,</li> <li><code>YoloV10</code> \u3002</li> </ul> <p>\u200b\u6211\u4eec\u200b\u5728\u200b <code>main_sdk_v*.py(\u200b\u4e0d\u200b\u63a8\u8350\u200b)</code> \u200b\u548c\u200b <code>main_api.py</code> \u200b\u4e2d\u200b\u4f7f\u7528\u200b\u76f8\u540c\u200b\u6837\u5f0f\u200b\u7684\u200b JSON \u200b\u89e3\u6790\u200b\uff0c\u200b\u4f46\u200b\u60a8\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u5728\u200b\u4ee3\u7801\u200b\u4e2d\u200b\u624b\u52a8\u200b\u8bbe\u7f6e\u200b\u8fd9\u200b\u4e24\u79cd\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u7684\u200b\u503c\u200b\u3002</p>"},{"location":"oak/yolo/depthai_yolo/#\u5bfc\u51fa\u6a21\u578b","title":"\u5bfc\u51fa\u200b\u6a21\u578b","text":"<p>\u200b\u7531\u4e8e\u200b\u6a21\u578b\u200b\u5fc5\u987b\u200b\u4ee5\u200b\u67d0\u79cd\u200b\u65b9\u5f0f\u200b\u5bfc\u51fa\u200b\u8f6c\u6362\u200b\u5230\u200b OpenVINO IR\uff0c\u200b\u6211\u4eec\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u5173\u4e8e\u200b\u8bad\u7ec3\u200b\u548c\u200b\u5bfc\u51fa\u200b\u7684\u200b\u6559\u7a0b\u200b\uff1a</p> <ul> <li> <p><code>YoloV3</code>, <code>YoloV4</code>, \u200b\u548c\u200b\u5b83\u4eec\u200b\u7684\u200b <code>tiny</code> \u200b\u7248\u672c\u200b\uff1a</p> <ul> <li>\u200b\u8bad\u7ec3\u200b\uff1a<ul> <li>YoloV3_V4_tiny_training.ipynb </li> <li>https://github.com/AlexeyAB/darknet</li> </ul> </li> <li>\u200b\u5bfc\u51fa\u200b\u8f6c\u6362\u200b\uff1a<ul> <li>https://github.com/luxonis/yolo2openvino</li> </ul> </li> </ul> </li> <li> <p><code>YoloV5</code>, <code>YoloV6</code>, \u200b\u548c\u200b <code>YoloV7</code> \uff1a</p> <ul> <li>\u200b\u8bad\u7ec3\u200b\u53ef\u200b\u53c2\u8003\u200b\u539f\u59cb\u200b\u4ed3\u5e93\u200b\uff1a<ul> <li>YoloV5,</li> <li>YoloV6,</li> <li>YoloV7</li> <li>YoloV8,</li> <li>YoloV5_training.ipynb </li> <li>YoloV6_training.ipynb </li> <li>YoloV7_training.ipynb </li> <li>YoloV8_training.ipynb </li> </ul> </li> <li>\u200b\u5bfc\u51fa\u200b\u8f6c\u6362\u200b\uff1a<ul> <li>https://tools.luxonis.com/   \u200b\u7f51\u9875\u200b\u5728\u7ebf\u200b\u8f6c\u6362\u200b\uff0c</li> <li>\u200b\u53c2\u8003\u200b https://github.com/luxonis/tools/tree/master/yolo   \u200b\u548c\u200b https://github.com/luxonis/tools/tree/master/yolov7   \u200b\u8fdb\u884c\u200b\u672c\u5730\u200b\u8f6c\u6362\u200b</li> <li>OAK \u200b\u76f8\u673a\u200b\u5982\u4f55\u200b\u5c06\u200b YOLO \u200b\u7cfb\u5217\u200b\u6a21\u578b\u200b\u8f6c\u6362\u6210\u200b blob \u200b\u683c\u5f0f\u200b\uff1f</li> </ul> </li> </ul> </li> </ul>"},{"location":"oak/yolo/depthai_yolo/#\u7528\u6cd5","title":"\u7528\u6cd5","text":""},{"location":"oak/yolo/depthai_yolo/#\u7528\u6cd5-1-\u6a21\u5757\u5b89\u88c5","title":"\u7528\u6cd5\u200b 1: \u200b\u6a21\u5757\u200b\u5b89\u88c5","text":"<ol> <li>\u200b\u5b89\u88c5\u200b     <pre><code>python3 -m pip install .\n</code></pre></li> <li> <p>\u200b\u8fd0\u884c\u200b</p> <p>\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>download_models</code> \u200b\u4e0b\u8f7d\u200b\u5168\u90e8\u200b\u9884\u5b9a\u200b\u4e49\u200b\u6a21\u578b\u200b <code>shell     &gt; python3 -m depthai_yolo.download_models     &gt; # \u200b\u6216\u200b     &gt; python3 -m depthai_yolo --download     &gt; # \u200b\u6216\u200b     &gt; depthai_yolo --download     &gt;</code></p> <p>```shell python3 -m depthai_yolo api -m model_name -c config_json</p> </li> </ol>"},{"location":"oak/yolo/depthai_yolo/#\u6216","title":"\u6216","text":"<p>depthai_yolo api -m model_name -c config_json ```</p> <p>\u200b\u82e5\u200b\u4f7f\u7528\u200b <code>OAK_D_SR</code> \u200b\u8bf7\u200b\u8fd0\u884c\u200b    <code>shell    python3 -m depthai_yolo sr -m model_name -c config_json    # \u200b\u6216\u200b    depthai_yolo sr -m model_name -c config_json</code></p>"},{"location":"oak/yolo/depthai_yolo/#\u7528\u6cd5-2-\u6e90\u7801\u8fd0\u884c","title":"\u7528\u6cd5\u200b 2: \u200b\u6e90\u7801\u200b\u8fd0\u884c","text":"<ol> <li>\u200b\u5b89\u88c5\u200b\u4f9d\u8d56\u200b     <pre><code>python3 -m pip install -r requirements.txt\n</code></pre> <p>\u200b\u82e5\u200b\u4f7f\u7528\u200b <code>SDK</code> \u200b\u8bf7\u200b\u8fd0\u884c\u200b <code>shell     &gt; python3 -m pip install -r requirements-sdk.txt     &gt;</code></p> </li> <li> <p>\u200b\u8fd0\u884c\u200b\u811a\u672c\u200b     &gt; \u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>download_models.py</code> \u200b\u811a\u672c\u200b\u4e0b\u8f7d\u200b\u9884\u5b9a\u200b\u4e49\u200b\u6a21\u578b\u200b     &gt; <pre><code>python3 -m src/depthai_yolo/download_models.py\n# \u200b\u6216\u200b\npython3 run.py --download\n</code></pre></p> <pre><code>python3 run.py api -m model_name -c config_json\n</code></pre> <p>\u200b\u82e5\u200b\u4f7f\u7528\u200b <code>OAK_D_SR</code> \u200b\u8bf7\u200b\u8fd0\u884c\u200b <code>shell   python3 run.py sr -m model_name -c config_json</code> </p> </li> </ol>"},{"location":"oak/yolo/depthai_yolo/#\u7528\u6cd5-3-sdk-\u4e0d\u63a8\u8350","title":"\u7528\u6cd5\u200b 3: SDK (\u200b\u4e0d\u200b\u63a8\u8350\u200b)","text":"<ol> <li>\u200b\u5b89\u88c5\u200b\u4f9d\u8d56\u200b     <pre><code>python3 -m pip install -r sdk_scripts/requirements-sdk.txt\n</code></pre></li> <li>\u200b\u8fd0\u884c\u200b\u811a\u672c\u200b     <pre><code>python3 sdk_scripts/main_sdk_v1.2.py -m model_name -c config_json\n</code></pre> <pre><code>python3 sdk_scripts/main_sdk_v1.9.py -conf config_json\n</code></pre></li> </ol> <p>\u200b\u6ce8\u610f\u200b\uff1a</p> <ul> <li><code>model_name</code> \u200b\u662f\u200b\u6765\u81ea\u200b DepthAI \u200b\u6a21\u578b\u5e93\u200b (https://zoo.luxonis.com) \u200b\u7684\u200b\u6a21\u578b\u200b\u540d\u79f0\u200b\u6216\u200b blob \u200b\u6587\u4ef6\u200b\u7684\u200b\u76f8\u5bf9\u8def\u5f84\u200b\u3002     \u200b\u8bf7\u200b\u67e5\u770b\u200b\u6211\u4eec\u200b\u7684\u200b\u6a21\u578b\u5e93\u200b\u4ee5\u200b\u67e5\u770b\u200b\u53ef\u7528\u200b\u7684\u200b\u9884\u200b\u8bad\u7ec3\u200b\u6a21\u578b\u200b\uff0c\u200b\u6216\u200b\u4f7f\u7528\u200b <code>-ls/--list_models</code> \u200b\u53c2\u6570\u200b\u67e5\u770b\u200b\u53ef\u7528\u200b\u6a21\u578b\u200b\u3002</li> <li><code>config_json</code> \u200b\u662f\u200b\u5e26\u6709\u200b Yolo \u200b\u6a21\u578b\u200b\u5143\u200b\u6570\u636e\u200b\uff08\u200b\u8f93\u5165\u200b\u5f62\u72b6\u200b\u3001\u200b\u951a\u70b9\u200b\u3001\u200b\u6807\u7b7e\u200b\u7b49\u200b\uff09\u200b\u7684\u200b JSON \u200b\u7684\u200b\u76f8\u5bf9\u8def\u5f84\u200b\u3002</li> </ul>"},{"location":"oak/yolo/depthai_yolo/#jsons","title":"JSONs","text":"<p>\u200b\u6211\u4eec\u200b\u5df2\u7ecf\u200b\u4e3a\u200b\u5e38\u89c1\u200b\u7684\u200b Yolo \u200b\u7248\u672c\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e00\u4e9b\u200b JSON\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u7f16\u8f91\u200b\u5b83\u4eec\u200b\u5e76\u200b\u4e3a\u200b\u60a8\u200b\u7684\u200b\u6a21\u578b\u200b\u8bbe\u7f6e\u200b\u5b83\u4eec\u200b\uff0c\u200b\u5982\u200b\u4e0a\u8ff0\u200b\u6559\u7a0b\u200b\u4e2d\u200b\u7684\u200b\u540e\u7eed\u200b\u6b65\u9aa4\u200b\u90e8\u5206\u200b\u6240\u8ff0\u200b\u3002\u200b\u5982\u679c\u200b\u60a8\u200b\u8981\u200b\u66f4\u6539\u200b\u6559\u7a0b\u200b\u4e2d\u200b\u7684\u200b\u67d0\u4e9b\u200b\u53c2\u6570\u200b\uff0c\u200b\u5219\u200b\u5e94\u200b\u7f16\u8f91\u200b\u76f8\u5e94\u200b\u7684\u200b\u53c2\u6570\u200b\u3002\u200b\u4e00\u822c\u6765\u8bf4\u200b\uff0cJSON \u200b\u4e2d\u200b\u7684\u200b\u8bbe\u7f6e\u200b\u5e94\u8be5\u200b\u9075\u5faa\u200b\u6a21\u578b\u200b\u7684\u200b CFG \u200b\u4e2d\u200b\u7684\u200b\u8bbe\u7f6e\u200b\u3002\u200b\u5bf9\u4e8e\u200b YoloV5\uff0c\u200b\u9ed8\u8ba4\u8bbe\u7f6e\u200b\u5e94\u200b\u4e0e\u200b YoloV3 \u200b\u76f8\u540c\u200b\u3002</p> <p>Note\uff1a\u200b\u503c\u200b\u5fc5\u987b\u200b\u4e0e\u200b\u8bad\u7ec3\u200b\u671f\u95f4\u200b\u5728\u200b CFG \u200b\u4e2d\u200b\u8bbe\u7f6e\u200b\u7684\u200b\u503c\u200b\u76f8\u5339\u914d\u200b\u3002\u200b\u5982\u679c\u200b\u60a8\u200b\u4f7f\u7528\u200b\u4e0d\u540c\u200b\u7684\u200b\u8f93\u5165\u200b\u5bbd\u5ea6\u200b\uff0c\u200b\u60a8\u200b\u8fd8\u200b\u5e94\u8be5\u200b\u5c06\u200b <code>side32</code> \u200b\u66f4\u200b\u6539\u4e3a\u200b <code>sideX</code> \u200b\u5e76\u200b\u5c06\u200b <code>side16</code> \u200b\u66f4\u200b\u6539\u4e3a\u200b <code>sideY</code>\uff0c\u200b\u5176\u4e2d\u200b <code>X = width16</code> \u200b\u548c\u200b <code>Y = width32</code>\u3002\u200b\u5982\u679c\u200b\u60a8\u200b\u4f7f\u7528\u200b\u7684\u200b\u662f\u975e\u200b\u5fae\u578b\u200b\u6a21\u578b\u200b\uff0c\u200b\u5219\u200b\u8fd9\u4e9b\u200b\u503c\u4e3a\u200b <code>width8</code>\u3001<code>width16</code> \u200b\u548c\u200b <code>width32</code>\u3002</p> <p>\u200b\u60a8\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u66f4\u6539\u200b IOU \u200b\u548c\u200b\u7f6e\u4fe1\u5ea6\u200b\u9608\u503c\u200b\u3002\u200b\u5982\u679c\u200b\u591a\u6b21\u200b\u68c0\u6d4b\u200b\u5230\u200b\u540c\u4e00\u4e2a\u200b\u76ee\u6807\u200b\uff0c\u200b\u5219\u200b\u589e\u52a0\u200b IOU \u200b\u9608\u503c\u200b\u3002\u200b\u5982\u679c\u200b\u6ca1\u6709\u200b\u68c0\u6d4b\u200b\u5230\u200b\u8db3\u591f\u200b\u7684\u200b\u76ee\u6807\u200b\uff0c\u200b\u5219\u200b\u964d\u4f4e\u200b\u7f6e\u4fe1\u5ea6\u200b\u9608\u503c\u200b\u3002\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u8fd9\u200b\u4e0d\u4f1a\u200b\u795e\u5947\u200b\u5730\u200b\u6539\u5584\u200b\u60a8\u200b\u7684\u200b\u76ee\u6807\u200b\u68c0\u6d4b\u5668\u200b\uff0c\u200b\u4f46\u200b\u5982\u679c\u200b\u67d0\u4e9b\u200b\u76ee\u6807\u200b\u7531\u4e8e\u200b\u9608\u503c\u200b\u592a\u9ad8\u200b\u800c\u200b\u88ab\u200b\u8fc7\u6ee4\u200b\u6389\u200b\uff0c\u200b\u5219\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u6709\u6240\u200b\u5e2e\u52a9\u200b\u3002</p>"},{"location":"oak/yolo/depthai_yolo/#depth-\u4fe1\u606f","title":"Depth \u200b\u4fe1\u606f","text":"<p>DepthAI \u200b\u4f7f\u200b\u60a8\u200b\u80fd\u591f\u200b\u5229\u7528\u200b\u6df1\u5ea6\u200b\u4fe1\u606f\u200b\u5e76\u200b\u83b7\u53d6\u200b\u68c0\u6d4b\u200b\u5230\u200b\u7684\u200b\u5bf9\u8c61\u200b\u7684\u200b <code>x</code>\u3001<code>y</code> \u200b\u548c\u200b <code>z</code> \u200b\u5750\u6807\u200b\u3002</p> <pre><code>python3 run.py api -m model_name -c config_json --spatial\n</code></pre> <p>\u200b\u6216\u8005\u200b</p> <pre><code>python3 main_sdk_v1.2.py -m model_name -c config_json --spatial\n</code></pre> <pre><code>python3 main_sdk_v1.9.py -conf config_json --spatial\n</code></pre> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u5bf9\u200b\u4f7f\u7528\u200b Yolo \u200b\u68c0\u6d4b\u5668\u200b\u7684\u200b\u6df1\u5ea6\u200b\u4fe1\u606f\u200b\u611f\u5174\u8da3\u200b\uff0c \u200b\u8bf7\u200b\u67e5\u770b\u200b\u6211\u4eec\u200b\u7684\u200b \u200b\u6587\u6863\u200b\u3002 </p>"}]}